#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;


int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };
int cnt,n;
int map[101][101];
int visit[101][101];
int min_x, min_y;
int max_x, max_y;


void dfs(int x, int y) {
	
	visit[x][y] = 1;

	min_x = min(min_x, x);
	min_y = min(min_y, y);
	max_x = max(max_x, x);
	max_y = max(max_y, y);


	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx >= 0 && ny >= 0 && nx < n && ny < n) {
			if (map[nx][ny] != 0 && visit[nx][ny] == 0) {
				dfs(nx, ny);
			}
		}
	}
}
void input() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
		}
	}
}
bool cmp(pair<int, int> a, pair<int, int> b) {
	if (a.first * a.second == b.first * b.second) {
		
		return a.first < b.first;
	}
	return a.first*a.second < b.first*b.second;
}
int main(void) {

	ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	int t;
	cin >> t;
	for (int tc = 1; tc <= t; tc++) {

		input();
		int idx = 0;
		pair<int, int> p[101];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (map[i][j] != 0 && visit[i][j] == 0) {
					min_x = i;
					min_y = j;
					
					dfs(i, j);
					cnt++;
					
					p[idx].first = max_x - min_x + 1;
					p[idx].second = max_y - min_y + 1;
					idx++;
					
					min_x = min_y = max_x = max_y = 0;
				}
			}
		}
		sort(p, p + idx, cmp);

		cout << "#" << tc << " " << cnt<<" ";
		for (int i = 0; i < idx; i++) {
			cout << p[i].first << " " << p[i].second<<" ";
		}
		cout << endl;
		idx = 0;
		cnt = 0;
		
		memset(visit, 0, sizeof(visit));


		
	}
	

	

	return 0;
}
//최대 크기가 100x100이라서 dfs로 통과가 될까 했는데 다행히 통과가 되었다. 행렬의 갯수는 dfs가 끝날때마다 cnt로 셀 수 있었고, 행렬의 크기는 해당 행렬의 
최소 x,y 최대 x,y를 찾고 최대-최소+1로 행렬의 크기를 구할 수 있있었다.
