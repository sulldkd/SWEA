#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;

int dx[4] = {0,1,0,-1};
int dy[4] = {1,0,-1,0};
int arr[11][11];
int num = 1;
int n;

void dfs(int x, int y,int direction) {

	
	if (arr[x][y] == 0) {
		arr[x][y] = num;
	}
	num++;

	int nx = x + dx[direction%4];
	int ny = y + dy[direction%4];

	if (nx >= 0 && ny >= 0 && nx < n && ny < n && arr[nx][ny]==0) {
		
			dfs(nx, ny,direction%4);
		
	}

	else {
		direction++;
		nx = x + dx[direction%4];
		ny = y + dy[direction%4];
		if (arr[nx][ny] == 0) {
			dfs(nx, ny, direction % 4);
		}
	}
	
}

int main(void) {

	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);


	int t;
	cin >> t;

	for (int tc = 1; tc <= t; tc++) {
		
		cin >> n;
		dfs(0, 0, 0);
		
		cout << "#" << tc << endl;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cout << arr[i][j] << " ";
			}
			cout << endl;
		}
		memset(arr, 0, sizeof(arr));
		num = 1;
		
	}

	return 0;
}


//숫자를 dfs로 채우는 식으로 새롭게 풀어봤다.
